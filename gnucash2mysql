#!/usr/bin/perl

# gnucash2mysql, a script to import a GnuCash 1.8 XML file into a MySQL
# database.  Best with MySQL 5.0 and above, to avoid issues with decimal math
# imprecisions.
#
# Copyright (c) 2006 Baron Schwartz, baron at xaprb dot com.  All rights
# reserved, except for those granted under the license.
# 
# See http://www.xaprb.com/blog/2006/03/12/gnucash-to-mysql-export-script/ for
# more information.

use strict;
use warnings FATAL => 'all';

use DBI();
use English qw(-no_match_vars);
use Getopt::Long;
use Term::ProgressBar;
use Term::ReadKey;
use XML::Parser::Expat;

our $VERSION = sprintf "%d.%03d", q$Revision: 1.8 $ =~ /(\d+)/g;

# ############################################################################
# Get configuration information.
# ############################################################################

my %opt_spec = (
   d => { s => 'database|d=s',  d => 'Database' },
   h => { s => 'host|h=s',      d => 'Database server hostname' },
   o => { s => 'port|P=i',      d => 'Database server port' },
   p => { s => 'pass|p=s',      d => 'Database password' },
   u => { s => 'user|u=s',      d => 'Database username' },
   l => { s => 'help',          d => 'Show this help message' },
   c => { s => 'create|c',      d => 'Drop and create tables' },
);

# For ordering them the way I want...
my @opt_keys = qw( h d o u p l c );

my %opts = (
   d => '',
   h => '',
   o => 0,
   p => 0,
   u => '',
   l => 0,
   c => 0,
);

Getopt::Long::Configure('no_ignore_case', 'bundling');
GetOptions( map { $opt_spec{$_}->{'s'} => \$opts{$_} }  @opt_keys );

$opts{'v'} ||= 1;
$opts{'n'} =   [ split(/,/, $opts{'n'} || '' ) ];

if ( $opts{'l'} || !@ARGV ) {
   print "Usage: $PROGRAM_NAME <options> <file>\n\n  Options:\n\n";
   foreach my $key ( @opt_keys ) {
      my ( $long, $short ) = $opt_spec{$key}->{'s'} =~ m/^(\w+)(?:\|([^=]*))?/;
      $long  = "--$long" . ( $short ? ',' : '' );
      $short = $short ? " -$short" : '';
      printf("  %-13s %-4s %s\n", $long, $short, $opt_spec{$key}->{'d'});
   }
   print <<USAGE;

$PROGRAM_NAME imports your GnuCash file into a MySQL database.

If possible, database options are read from your .my.cnf file.
For more details, please read the documentation:

   perldoc $PROGRAM_NAME

USAGE
   exit(1);
}

my $conn = {
   h  => $opts{'h'},
   db => $opts{'d'},
   u  => $opts{'u'},
   p  => $opts{'p'},
   o  => $opts{'o'},
};

if ( grep { !$conn->{$_} } keys %$conn ) {
   # Try to use the user's .my.cnf file.
   eval {
      open my $conf_file, "<", "$ENV{HOME}/.my.cnf" or die $OS_ERROR;
      while ( my $line = <$conf_file> ) {
         next if $line =~ m/^#/;
         my ( $key, $val ) = split( /=/, $line );
         next unless defined $val;
         chomp $val;
         if ( $key eq 'host' )     { $conn->{'h'}  ||= $val; }
         if ( $key eq 'user' )     { $conn->{'u'}  ||= $val; }
         if ( $key =~ m/^pass/ )   { $conn->{'p'}  ||= $val; }
         if ( $key eq 'database' ) { $conn->{'db'} ||= $val; }
         if ( $key eq 'port' )     { $conn->{'o'}  ||= $val; }
      }
      close $conf_file;
   };
   if ( $EVAL_ERROR && $EVAL_ERROR !~ m/No such file/ ) {
      print "I tried to read your .my.cnf file, but got '$EVAL_ERROR'\n";
   }
}

# Fill in defaults for some things
$conn->{'o'} ||= 3306;
$conn->{'h'} ||= 'localhost';
$conn->{'u'} ||= getlogin() || getpwuid($UID);
$conn->{'p'} ||= '';

my %prompts = (
   o  => "\nPort number: ",
   h  => "\nDatabase host: ",
   u  => "\nDatabase user: ",
   p  => "\nDatabase password: ",
   db => "\nDatabase: ",
);

# If anything remains, prompt the terminal
while ( my ( $thing ) = grep { !$conn->{$_} } keys %$conn ) {
   $conn->{$thing} = prompt($prompts{$thing}, $thing eq 'p');
}

# ############################################################################
# Get ready to do the main work.
# ############################################################################

my $filename = $ARGV[0];
my $file_contents = get_file( $filename );

# Account
my %act = ();
# Transaction
my %trn = ();
# Transaction split
my %split = ();
# What we're processing at the moment
my $oper = undef;
# Global $data variable to store data (because any given call to the character
# handler might not have all the data in it).
my $g_data = "";

# Connect to the database
my $dbh = DBI->connect(
   "DBI:mysql:database=$conn->{db};host=$conn->{h};port=$conn->{o}",
   $conn->{'u'}, $conn->{'p'}, { AutoCommit => 1, RaiseError => 1, PrintError => 0 } )
   or die("Can't connect to DB: $!");

my $sth_split = $dbh->prepare("
    insert ignore into split(transaction, id, status, account, amount, memo)
    values (?, ?, ?, ?, ?, ?);");
my $sth_sa1 = $dbh->prepare("
    insert ignore into account(id, type, parent, name, description, is_placeholder)
    values(?, ?, ?, ?, ?, ?);");
my $sth_sa2 = $dbh->prepare("
    insert ignore into account(id, type, name, description, is_placeholder)
    values(?, ?, ?, ?, ?);");
my $sth_tr1 = $dbh->prepare("
    insert ignore into transaction(id, posted, description)
    values (?, ?, ?);");
my $sth_tr2 = $dbh->prepare("
    insert ignore into transaction(id, posted)
    values (?, ?);");

if ($opts{'c'}) {
    print "Creating schema...\n";
    eval {
        local $/ = "\n\n";
        while (<DATA>) {
            $dbh->do($_);
        }
        commit();
    };
    die("Error: $@") if $@;
}

print "Parsing $filename...\n";

my $tran_count = `grep "<gnc:transaction" $filename | wc -l`;
my $progress = Term::ProgressBar->new (
    {
        count => 80,
        name => "Progress"
    });
my $count = 0;

# Parse the file
my $parser = new XML::Parser::Expat;
$parser->setHandlers('Start' => \&sh,
                     'End'   => \&eh,
                     'Char'  => \&ch);
open my $XML, $filename or die "Couldn't open: $!";
$parser->parse($XML);
close $XML;

$dbh->disconnect;

# Handles start elements.
sub sh {
    my ($p, $el, %atts) = @_;
    $g_data = "";

    SWITCH:
    for ($el) {
        /gnc:account/     && do { %act = ();          last SWITCH; };
        /act:name/        && do { $oper = "act_name"; last SWITCH; };
        /act:id/          && do { $oper = "act_id";   last SWITCH; };
        /act:type/        && do { $oper = "act_ty";   last SWITCH; };
        /act:parent/      && do { $oper = "act_par";  last SWITCH; };
        /act:description/ && do { $oper = "act_des";  last SWITCH; };
        /gnc:transaction/ && do { %trn = ();          last SWITCH; };
        /trn:id/          && do { $oper = "trn_id";   last SWITCH; };
        /trn:description/ && do { $oper = "trn_des";  last SWITCH; };
        /trn:date-posted/ && do { $oper = "trn_dat";  last SWITCH; };
        /ts:date/ && $oper eq "trn_dat"
                          && do { $oper = "get_trdt"; last SWITCH; };
        /trn:date-posted/ && do { $oper = "trn_dat";  last SWITCH; };
        /trn:splits/      && do { insert_tran();      last SWITCH; };
        /trn:split/       && do { %split = ();        last SWITCH; };
        /act:slots/       && do { $oper = "act_slot"; last SWITCH; };
        /slot:value/      && do { $oper = "slot_val"; last SWITCH; };
        /split:id/        && do { $oper = "split_id"; last SWITCH; };
        /split:memo/      && do { $oper = "split_me"; last SWITCH; };
        /split:reconcile/ && do { $oper = "split_rs"; last SWITCH; };
        /split:value/     && do { $oper = "split_va"; last SWITCH; };
        /split:account/   && do { $oper = "split_ac"; last SWITCH; };
        last SWITCH;
    }
}

# Handles character data.  Depending on what we're doing at the
# moment, saves the character data to a variable.
sub ch {
    my ($p, $data) = @_;

    $g_data .= $data; # Add a 'chunk' to the data;

    if ($oper) {
        SWITCH:
        for ($oper) {
            /act_name/  && do { $act{'name'} = $g_data; last SWITCH; };
            /act_id/    && do { $act{'id'}   = $g_data; last SWITCH; };
            /act_ty/    && do { $act{'ty'}   = $g_data; last SWITCH; };
            /act_par/   && do { $act{'par'}  = $g_data; last SWITCH; };
            /act_des/   && do { $act{'des'}  = $g_data; last SWITCH; };
            /trn_id/    && do { $trn{'id'}   = $g_data; last SWITCH; };
            /trn_des/   && do { $trn{'des'}  = $g_data; last SWITCH; };
            /get_trdt/  && do { $trn{'date'} = $g_data; last SWITCH; };
            /split_id/  && do { $split{'id'} = $g_data; last SWITCH; };
            /split_rs/  && do { $split{'rs'} = $g_data; last SWITCH; };
            /split_me/  && do { $split{'me'} = $g_data; last SWITCH; };
            /split_va/  && do { $split{'va'} = eval $g_data; last SWITCH; };
            /split_ac/  && do { $split{'ac'} = $g_data; last SWITCH; };
            /slot_val/  && do { $act{'pl'}   = $g_data eq 'true' ? 1 : 0; last SWITCH; };
            last SWITCH;
        }
    }
}

# Handles closing tags.
sub eh {
    my ($p, $el) = @_;

    SWITCH:
    for ($el) {
        /gnc:account/       && do { save_account();       last SWITCH; };
        /gnc:transaction/   && do { %trn = ();            last SWITCH; };
        /^trn:split$/       && do { save_split();         last SWITCH; };
        /^trn:splits$/      && do { commit();             last SWITCH; };
        $oper = 0;
        last SWITCH;
    }
}

sub save_account {
    if ($act{'par'}) {
        $sth_sa1->execute(map{$_;} @act{qw(id ty par name des pl)});
    }
    else {
        $sth_sa2->execute(map{$_;} @act{qw(id ty name des pl)});
    }
    commit();
}

sub insert_tran {
    if ($trn{'des'}) {
        $sth_tr1->execute(map{$_;} @trn{qw(id date des)});
    }
    else {
        $sth_tr2->execute(map{$_;} @trn{qw(id date)});
    }
    commit();
    $progress->update(++$count / $tran_count * 80);
}

sub save_split {
    eval {
        $sth_split->execute($trn{'id'}, map{$_;} @split{qw(id rs ac va me)});
    };
    if ($@) {
        die("Error inserting split for $trn{id}\n'"
            . join("'\n'", map{$_;} @split{qw(id rs ac va me)})
            . "'\n");
    }
}

sub commit {
   $dbh->do("COMMIT");
   $dbh->do("START TRANSACTION");
}

sub get_file {
   my $filename = shift;
   open my $file, "<", "$filename" or die "Can't open $filename: $OS_ERROR";
   my $file_contents = do { local $INPUT_RECORD_SEPARATOR; <$file>; };
   close $file;
   return $file_contents;
}

sub prompt {
   my ( $prompt, $noecho ) = @_;
   print $prompt;
   my $response;

   ReadMode('noecho') if $noecho;

   $response = <STDIN>;
   chomp($response);

   ReadMode('normal');

   return $response;
}

# ############################################################################
# Perldoc
# ############################################################################

=pod

=head1 NAME

gnucash2mysql - Read a GnuCash file and store it in MySQL for querying.

=head1 SYNOPSIS

Assuming you have your .my.cnf file set up to connect as desired, the
following will create tables and store the file in them:

 gnucash2mysql <gnucash file>

=head1 DESCRIPTION

gnucash2mysql reads an XML file and stores it in MySQL tables for your
analysis with standard SQL.  Some queries are included with gnucash2mysql so
you can get started.  For more information, read the articles I've written on
http://www.xaprb.com/.  Please let me know if you need help, or if it doesn't
do what you want.

Prior to MySQL 5, DECIMAL math isn't precise, and may produce unexpected
results.

=head1 CONFIGURATION

No configuration file is needed.  If you specify arguments on the command
line, they take precedence over other sources.  Otherwise,
mysql-query-profiler will try to read your MySQL client configuration file
($HOME/.my.cnf), and if it can't find what it needs to connect to MySQL, will
prompt you interactively.

=head1 SYSTEM REQUIREMENTS

You need the following Perl modules: Getopt::Long, DBI, DBD::mysql,
Term::ProgressBar, XML::Parser::Expat, and Term::ReadKey.

=head1 LICENSE

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

Copyright (c) 2006 Baron Schwartz, baron at xaprb dot com.  All rights
reserved, except for those granted under the license.

This program is free software.  You may redistribute it under either the GNU
GPL version 2, or the Perl Artistic License, at your option.  For details on
these licenses, please issue `man perlartistic' or `man perlgpl'.

=head1 AUTHOR

Baron Schwartz, baron at xaprb dot com.

=cut

__DATA__
drop table if exists split;

drop table if exists transaction;

drop table if exists account;

create table account (
    id char(31) not null primary key,
    name varchar(255),
    type varchar(50),
    parent char(31),         
    description varchar(255),
    is_placeholder tinyint not null default 0,
    index(parent),
    index(type),
    foreign key FK_account_account (parent)
        references account(id)
        on delete cascade
) type=InnoDB;

create table transaction (
    id char(31) not null primary key,
    posted date not null,
    description varchar(255),
    index(posted)
) type=InnoDB;

create table split (
    id char(31) not null primary key,
    transaction char(31) not null,
    status char(1) not null default '',
    account char(31) not null,
    amount decimal(8,2) not null,
    memo varchar(255),
    foreign key FK_split_transaction(transaction)
        references transaction(id)
        on delete cascade,
    foreign key FK_split_account(account)
        references account(id)
        on delete cascade
) type=InnoDB;
